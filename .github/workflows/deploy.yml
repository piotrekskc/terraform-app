name: CI/CD Pipeline

permissions:
  id-token: write
  contents: read

on:
  push:
    branches:
      - main
  
jobs:
  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: 'Azure login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}  

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ secrets.ACR_LOGIN_SERVER }}

      - name: Build Backend Docker Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/backend-webapp:latest ./my-python-app/backend

      - name: Build Frontend Docker Image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/frontend-webapp:latest ./my-python-app/frontend

      - name: Push Backend Docker Image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/backend-webapp:latest

      - name: Push Frontend Docker Image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/frontend-webapp:latest

  deploy-infra:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: set-variables
        shell: 'pwsh'
        run: |
          @("ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}",
            "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}",
            "ARM_USE_OIDC=true",
            "ARM_USE_AZUREAD=true") | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Initialize Terraform
        shell: 'pwsh'
        run: terraform init

      - name: Plan Terraform Changes
        shell: 'pwsh'
        run: terraform plan -var="acr_login_server=${{ secrets.ACR_LOGIN_SERVER }}"

      - name: Apply Terraform Changes
        shell: 'pwsh'
        run: terraform apply -auto-approve -var="acr_login_server=${{ secrets.ACR_LOGIN_SERVER }}"

  update-app-service:
    name: Update App Services with Latest Images
    runs-on: ubuntu-latest
    needs: deploy-infra

    steps:
      - name: 'Azure login'
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Update Backend App Service
        run: |
          az webapp config container set \
            --name piotrc-backend-app \
            --resource-group rg-PiotrC \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/backend-webapp:latest \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }}

      - name: Update Frontend App Service
        run: |
          az webapp config container set \
            --name piotrc-frontend-app \
            --resource-group rg-PiotrC \
            --docker-custom-image-name ${{ secrets.ACR_LOGIN_SERVER }}/frontend-webapp:latest \
            --docker-registry-server-url https://${{ secrets.ACR_LOGIN_SERVER }}